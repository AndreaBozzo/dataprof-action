name: Test DataProf Action

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-action:
    runs-on: ubuntu-latest
    name: Test Data Quality Analysis

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create test data
      run: |
        mkdir -p test_data
        cat > test_data/sample.csv << 'EOF'
        id,name,email,age,salary,department,status
        1,Alice Johnson,alice@example.com,28,65000,Engineering,active
        2,Bob Smith,bob@example.com,34,72000,Marketing,active
        3,Carol White,,42,58000,Sales,active
        4,David Brown,david@example.com,31,68000,Engineering,inactive
        5,Emma Davis,emma@example.com,29,63000,Marketing,active
        6,Frank Miller,,38,71000,Sales,active
        7,Grace Wilson,grace@example.com,45,79000,Engineering,active
        8,Henry Moore,henry@example.com,33,66000,Marketing,inactive
        9,Ivy Taylor,ivy@example.com,27,61000,Sales,active
        10,Jack Anderson,jack@example.com,36,74000,Engineering,active
        EOF

    - name: Run DataProf Analysis
      id: dataprof
      uses: ./
      with:
        file: 'test_data/sample.csv'
        quality-threshold: 75
        fail-on-issues: false
        output-format: json

    - name: Display Results
      run: |
        echo "## DataProf Analysis Results"
        echo "Quality Score: ${{ steps.dataprof.outputs.quality-score }}%"
        echo "Quality Level: ${{ steps.dataprof.outputs.quality-level }}"
        echo "Completeness: ${{ steps.dataprof.outputs.completeness-score }}%"
        echo "Uniqueness: ${{ steps.dataprof.outputs.uniqueness-score }}%"
        echo "Validity: ${{ steps.dataprof.outputs.validity-score }}%"
        echo "Consistency: ${{ steps.dataprof.outputs.consistency-score }}%"
        echo "Timeliness: ${{ steps.dataprof.outputs.timeliness-score }}%"
        echo "Accuracy: ${{ steps.dataprof.outputs.accuracy-score }}%"
        echo "Issues Count: ${{ steps.dataprof.outputs.issues-count }}"
        echo "File: ${{ steps.dataprof.outputs.file-path }}"

    - name: Validate Outputs
      run: |
        score="${{ steps.dataprof.outputs.quality-score }}"

        # Check score is numeric
        if ! [[ "$score" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
          echo "ERROR: Quality score is not numeric: $score"
          exit 1
        fi

        # Check score is in valid range
        if (( $(echo "$score < 0" | bc -l) )) || (( $(echo "$score > 100" | bc -l) )); then
          echo "ERROR: Quality score out of range (0-100): $score"
          exit 1
        fi

        echo "✅ All validations passed!"
        echo "Quality score: ${score}%"

  test-low-quality-data:
    runs-on: ubuntu-latest
    name: Test Low Quality Data Detection

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create low quality test data
      run: |
        mkdir -p test_data
        cat > test_data/bad_data.csv << 'EOF'
        id,name,email,age,value
        1,Alice,,28,-100
        2,Bob,bob@test,999,50
        3,Carol,,42,75
        4,,,300,25
        5,Emma,emma@test.com,,50
        6,Frank,,38,invalid
        7,Grace,grace@test,45,80
        8,,,33,
        9,Ivy,ivy@test.com,27,90
        10,Jack,,36,100
        EOF

    - name: Run DataProf Analysis (low quality expected)
      id: dataprof-bad
      uses: ./
      with:
        file: 'test_data/bad_data.csv'
        quality-threshold: 50
        fail-on-issues: false
        output-format: json

    - name: Verify Low Quality Detected
      run: |
        score="${{ steps.dataprof-bad.outputs.quality-score }}"
        issues="${{ steps.dataprof-bad.outputs.issues-count }}"

        echo "Quality Score: ${score}%"
        echo "Issues Count: ${issues}"

        # Verify we got valid outputs
        if [[ -z "$score" ]]; then
          echo "❌ No quality score returned"
          exit 1
        fi

        # Low quality data should have issues
        if [[ "$issues" -gt 0 ]]; then
          echo "✅ Quality issues correctly identified: ${issues} issues"
        else
          echo "⚠️  Expected some quality issues in low quality data"
        fi

        echo "✅ Low quality data detection test passed"